import cv2
import numpy as np
import mediapipe as mp
import pyautogui
import time

# Initialize MediaPipe Face Mesh
mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh(max_num_faces=1, refine_landmarks=True)
mp_drawing = mp.solutions.drawing_utils

# Screen dimensions
screen_width, screen_height = pyautogui.size()

# Start capturing video from the webcam
cap = cv2.VideoCapture(0)

# To track previous nose positions for smooth movement
prev_screen_x, prev_screen_y = pyautogui.position()

# Set a time limit to avoid double-clicks for blinks
last_left_blink_time = 0
last_right_blink_time = 0
blink_cooldown = 0.3  # 300 milliseconds cooldown between clicks

# Disable pyautogui failsafe (optional)
pyautogui.FAILSAFE = False

# Continuous loop to capture video and control the mouse
while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to capture frame from webcam")
        break

    # Flip the frame horizontally for natural interaction
    frame = cv2.flip(frame, 1)
    frame_height, frame_width, _ = frame.shape

    # Convert the frame to RGB
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Process the frame with MediaPipe Face Mesh
    result = face_mesh.process(rgb_frame)

    if result.multi_face_landmarks:
        for face_landmarks in result.multi_face_landmarks:
            # Nose tip (landmark 1) for mouse movement
            nose_tip = face_landmarks.landmark[1]
            nose_x = int(nose_tip.x * frame_width)
            nose_y = int(nose_tip.y * frame_height)

            # Map nose position to screen coordinates
            screen_x = np.interp(nose_x, [0, frame_width], [0, screen_width])
            screen_y = np.interp(nose_y, [0, frame_height], [0, screen_height])

            # Smooth mouse movement (adjust smoothing factor as needed)
            smoothing_factor = 0.2
            screen_x = prev_screen_x + (screen_x - prev_screen_x) * smoothing_factor
            screen_y = prev_screen_y + (screen_y - prev_screen_y) * smoothing_factor

            # Move the mouse to the mapped position
            pyautogui.moveTo(screen_x, screen_y)

            # Update previous screen position
            prev_screen_x, prev_screen_y = screen_x, screen_y

            # Eye landmarks for blinking detection (left and right)
            left_eye_top = face_landmarks.landmark[159]
            left_eye_bottom = face_landmarks.landmark[145]
            right_eye_top = face_landmarks.landmark[386]
            right_eye_bottom = face_landmarks.landmark[374]

            left_eye_aspect_ratio = np.linalg.norm([left_eye_top.x - left_eye_bottom.x, left_eye_top.y - left_eye_bottom.y])
            right_eye_aspect_ratio = np.linalg.norm([right_eye_top.x - right_eye_bottom.x, right_eye_top.y - right_eye_bottom.y])

            # Threshold for blink detection
            blink_threshold = 0.02

            current_time = time.time()

            # Check for left-eye blinks (left-click)
            if left_eye_aspect_ratio < blink_threshold and (current_time - last_left_blink_time) > blink_cooldown:
                pyautogui.click(button='left')
                last_left_blink_time = current_time

            # Check for right-eye blinks (right-click)
            if right_eye_aspect_ratio < blink_threshold and (current_time - last_right_blink_time) > blink_cooldown:
                pyautogui.click(button='right')
                last_right_blink_time = current_time

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
